#!/usr/bin/env python
r'''
Author:  Chris Burns (cburns@obs.carnegiescience.edu)

This script is run with one argument:  the name of a .bbl file generated by
LaTeX and BibTeX. It parses each \bibitem entry and extract the list of
authors. It then performs the following logic:

   - If number of authors is 1 to 4, leave it alone
   - If number of authors is > 4:, replace with author1, author2 et al.
'''

import sys,string
import re

# Splits bibitem into short-author, key, and bibdata
pat1 = re.compile(r'\\bibitem\[(.*?)\]{(.*?)}(.*)$')
# Get the short version of the short-author
pat2 = re.compile(r'{(.*\(.*?\))')
# Get the list of authors
pat3 = re.compile(r'{?[^,&]+}?,[^,0-9&]+')
# Get the trailing stuff
pat4 = re.compile(r'[0-9][0-9][0-9][0-9].*$')

f = open(sys.argv[1])
lines = f.readlines()
lines = map(string.strip, lines)
f.close()

# Make a backup
f = open(sys.argv[1]+'.backup','w')
for line in lines:
   print >>f, line
f.close()

# Now open the original for writing
f = open(sys.argv[1], 'w')

bibitems = []
preamble = []
start = 0
for line in lines:
   if start:
      if line == '':
         bibitems.append("")
      else:
         bibitems[-1] += line
   else:
      if line == '':
         bibitems.append("")
         start = 1
      else:
         preamble.append(line)

# Output the stuff before the first \bibitem
for line in preamble:
   print >> f, line

# Parse the \bibitems
for item in bibitems[:-1]:
   try:
      short,key,bibdata = pat1.search(item).groups()
   except:
      print>> sys.stderr,  "Failed to parse this bibitem:"
      print>> sys.stderr,  item

   str = '\\bibitem['
   try:
      short = pat2.search(short).group(0)
   except:
      print>> sys.stderr,  "Failed to parse the short-author:"
      print>> sys.stderr,  short
   str += short + "}]{"
   str += key + "}"

   # Get the end data
   try:
      res = pat4.search(bibdata)
      end = res.group(0)
      ind = res.start() + 4
   except:
      print >>sys.stderr,  "Failed to parse the final data:"
      print >> sys.stderr, bibdata

   # Now deal with the number of authors
   try:
      #authors = pat3.findall(bibdata[:ind].replace('\&',''))
      authors = pat3.findall(bibdata[:ind])
   except:
      print >> sys.stderr, "Failed to parse the bibdata for authors:"
      print >> sys.stderr, bibdata

   if type(authors) == type(""):
      str += authors
   elif len(authors) == 0:
      print >> sys.stderr, "WARNING:  no authors for citation %s" % key
   elif len(authors) == 1:
      str += authors[0]
   elif len(authors) <= 4:
      m = min(3,len(authors)-1)
      for a in authors[:m]:
         str += a + ','
      str += " \\& " + authors[m]
   else:
      str += authors[0] + ", " + authors[1] + ", {et~al.}"

   str += " "+end
   print >> f,  str + "\n"

print >> f,  bibitems[-1]
